name: transcendence

# Setup of Containers
services:
  # Backend with Django and Daphne (ASGI) servers (no load balancer)
  django:
    container_name: django
    labels:
      - com.django.description='Django Backend'
    build:
      context: requirements/django
      dockerfile: Dockerfile
    environment:
      DJANGO_SETTINGS_MODULE: backend.settings
      DJANGO_SECRET_KEY_FILE: /run/secrets/django_secret_key
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      SQL_HOST: ${SQL_HOST}
      SQL_PORT: ${SQL_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_USER_PASSWORD_FILE: /run/secrets/db_password
      API_42_ID: ${API_42_ID}
      API_42_SECRET: ${API_42_SECRET}
      REDIRECT_URI: ${REDIRECT_URI}
      GOOGLE_API_ID: ${GOOGLE_API_ID}
      GOOGLE_API_SECRET: ${GOOGLE_API_SECRET}

    secrets:
      - db_password
      - django_secret_key
    expose:
      - "8000"
    networks:
      - transcendence
    volumes:
      # Volume for the Daphne socket and static files
      - backend:/usr/src/app
      - ./requirements/django/app/media:/app/media
    # restart: unless-stopped
    restart: no
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "sh", "-c", "echo -e 'GET / HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc -U /usr/src/app/daphne.sock"]
      interval: 1m30s
      timeout: 5s
      retries: 5
    develop:
      # Watch for changes in the Django app folder
      watch:
        - action: sync+restart
          path: ./requirements/django/app
          target: /usr/src/app

  # Reverse Proxy and Load Balancer
  nginx:
    container_name: nginx
    labels:
      - com.nginx.description='Nginx Reverse Proxy'
    build:
      context: requirements/nginx
      dockerfile: Dockerfile
      args:
        - SSL_COUNTRY = ${SSL_COUNTRY}
        - SSL_STATE = ${SSL_STATE}
        - SSL_LOCALITY = ${SSL_LOCALITY}
        - SSL_ORGANIZATION = ${SSL_ORGANIZATION}
        - SSL_ORGANIZATIONAL_UNIT = ${SSL_ORGANIZATIONAL_UNIT}
        - SSL_COMMON_NAME = ${SSL_COMMON_NAME}
    ports:
      - "443:443"
    networks:
      - transcendence
    volumes:
      - backend:/usr/src/app
      - ./requirements/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./requirements/django/app/media:/app/media
    restart: unless-stopped
    depends_on:
      - django
    develop:
      watch:
        - action: rebuild
          path: ./requirements/django/app
          target: /usr/src/app

  # Data Base
  db:
    container_name: postgresql
    labels:
      - com.postgresql.description='PostgreSQL Data Base'
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      SQL_HOST: ${SQL_HOST}
      SQL_PORT: ${SQL_PORT}
    secrets:
      - db_password
    expose:
      - ${SQL_PORT}
    networks:
      - transcendence
    volumes:
      - postgresql:/var/lib/postgresql/data/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m30s
      timeout: 5s
      retries: 5
  
  # Redis
  redis:
    container_name: redis
    labels:
      - com.redis.description='Redis Cache'
    image: redis:7
    expose:
      - "6379"
    networks:
      - transcendence
    volumes:
      - redis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 5s
      retries: 5

# Secrets
secrets:
  # Data Base passwords
  db_password:
    file: ../secrets/db_password.txt
  # Django secret key
  django_secret_key:
    file: ../secrets/django_secret_key.txt

# Networks
networks:
  transcendence:
    name: transcendence_network
    # Driver for the network
    ## bridge allows containers to communicate with each other
    driver: bridge

# Volumes
## Driver: local allows to use the local file system
## Bind allows containers and host to share the same volume (changes in one side are reflected in the other)
volumes:
  # Backend data (Django temporary volume)
  backend:
  # Redis data
  redis:
  # PostgreSQL data (PostgreSQL permanent volume)
  postgresql:
    driver: local
    driver_opts:
      type: none
      device: ${HOME_PATH}/data/postgresql
      o: bind

name: transcendence

# Setup of Containers
services:
  # Backend with Django and Daphne (ASGI) servers (no load balancer)
  django:
    container_name: django
    labels:
      - com.django.description='Django Backend'
    build:
      context: requirements/django
      dockerfile: Dockerfile
    environment:
      DJANGO_SECRET_KEY_FILE: /run/secrets/django_secret_key
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      SQL_HOST: ${SQL_HOST}
      SQL_PORT: ${SQL_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_USER_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
      - django_secret_key
    expose:
      - "8000"
    networks:
      - transcendence
    volumes:
      # Volume for the Daphne socket and static files
      - backend-data:/usr/src/app
    # restart: unless-stopped
    restart: no
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "sh", "-c", "echo -e 'GET / HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc -U /usr/src/app/daphne.sock"]
      interval: 1m30s
      timeout: 5s
      retries: 5
    develop:
      # Watch for changes in the Django app folder
      watch:
        - action: sync+restart
          path: ./requirements/django/app
          target: /usr/src/app

  # Reverse Proxy and Load Balancer
  nginx:
    container_name: nginx
    labels:
      - com.nginx.description='Nginx Reverse Proxy'
    build:
      context: requirements/nginx
      dockerfile: Dockerfile
      args:
        - SSL_COUNTRY = ${SSL_COUNTRY}
        - SSL_STATE = ${SSL_STATE}
        - SSL_LOCALITY = ${SSL_LOCALITY}
        - SSL_ORGANIZATION = ${SSL_ORGANIZATION}
        - SSL_ORGANIZATIONAL_UNIT = ${SSL_ORGANIZATIONAL_UNIT}
        - SSL_COMMON_NAME = ${SSL_COMMON_NAME}
    ports:
      - "443:443"
    networks:
      - transcendence
    volumes:
      - backend-data:/usr/src/app
      - ./requirements/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    depends_on:
      - django
    develop:
      watch:
        - action: sync+restart
          path: ./requirements/django/app
          target: /usr/src/app

  # Data Base
  db:
    container_name: postgresql
    labels:
      - com.postgresql.description='PostgreSQL Data Base'
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      SQL_HOST: ${SQL_HOST}
      SQL_PORT: ${SQL_PORT}
    secrets:
      - db_password
    expose:
      - ${SQL_PORT}
    networks:
      - transcendence
    volumes:
      - postgresql-data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m30s
      timeout: 5s
      retries: 5
  
  # Redis
  redis:
    container_name: redis
    labels:
      - com.redis.description='Redis Cache'
    image: redis:7
    restart: unless-stopped
    expose:
      - "6379"
    networks:
      - transcendence
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 5s
      retries: 5
  
  # Grafana
  grafana:
    container_name: grafana
    labels:
      - com.grafana.description='Grafana Monitoring'
    image: grafana/grafana-oss:11.2.0
    restart: unless-stopped
    environment:
      # Grafana Admin user
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
      # Debug (Increase log level)
      # GF_LOG_LEVEL: debug
      # PostgreSQL data source
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - grafana_admin_password
      - db_password
    ports:
      - "3000:3000"
    networks:
      - transcendence
    volumes:
      - ./requirements/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./requirements/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    develop:
      watch:
        - action: sync+restart
          path: ./requirements/grafana/provisioning
          target: /etc/grafana/provisioning
  # Prometheus
  prometheus:
    container_name: prometheus
    labels:
      - com.prometheus.description='Prometheus Monitoring'
    image: prom/prometheus:v2.54.0
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - transcendence
    volumes:
      - ./requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - node-exporter
  # Prometheus Node Exporter (for monitoring the host)
  node-exporter:
    container_name: node-exporter
    labels:
      - com.node-exporter.description='Prometheus Node Exporter'
    image: prom/node-exporter:v1.8.2
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - transcendence
    ## Mount host directories to access host information and not container information
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

# Secrets
secrets:
  # Data Base passwords
  db_password:
    file: ../secrets/db_password.txt
  # Django secret key
  django_secret_key:
    file: ../secrets/django_secret_key.txt
  # Grafana admin password
  grafana_admin_password:
    file: ../secrets/grafana_admin_password.txt

# Networks
networks:
  transcendence:
    name: transcendence_network
    # Driver for the network
    ## bridge allows containers to communicate with each other
    driver: bridge

# Volumes
## Driver: local allows to use the local file system
## Bind allows containers and host to share the same volume (changes in one side are reflected in the other)
volumes:
  # Backend data (Django temporary volume)
  backend-data:
  # Redis data
  redis-data:
  # Prometheus data
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME_PATH}/data/prometheus
      o: bind
  # Grafana data
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME_PATH}/data/grafana
      o: bind
  # PostgreSQL data (PostgreSQL permanent volume)
  postgresql-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME_PATH}/data/postgresql
      o: bind